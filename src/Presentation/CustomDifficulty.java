package Presentation;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionListener;

public class CustomDifficulty {
    private JPanel CustomDifficultyPanel;
    private JSpinner lengthSpinner;
    private JSpinner turnSpinner;
    private JRadioButton allowRepeatedRadioButton;
    private JRadioButton noRepeatedRadioButton;
    private JLabel turnsLabel;
    private JLabel lengthLabel;
    private JButton backButton;
    private JButton continueButton;
    private JCheckBox tipsCheckBox;

    public JPanel getCustomDifficultyPanel() {
        return CustomDifficultyPanel;
    }

    public JSpinner getLengthSpinner() {
        return lengthSpinner;
    }

    public JSpinner getTurnSpinner() {
        return turnSpinner;
    }

    public JRadioButton getAllowRepeatedRadioButton() {
        return allowRepeatedRadioButton;
    }

    public JRadioButton getNoRepeatedRadioButton() {
        return noRepeatedRadioButton;
    }

    public JButton getBackButton() {
        return backButton;
    }

    public JButton getContinueButton() {
        return continueButton;
    }

    public void addContinueButtonActionListener(ActionListener listener) {
        continueButton.addActionListener(listener);
    }

    public void addBackButtonActionListener(ActionListener listener) {
        backButton.addActionListener(listener);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        CustomDifficultyPanel = new JPanel();
        CustomDifficultyPanel.setLayout(new GridBagLayout());
        CustomDifficultyPanel.setBackground(new Color(-12501697));
        CustomDifficultyPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), "Mastermind", TitledBorder.CENTER, TitledBorder.BELOW_TOP, this.$$$getFont$$$("DejaVu Sans Mono", Font.BOLD | Font.ITALIC, 28, CustomDifficultyPanel.getFont()), new Color(-4737097)));
        allowRepeatedRadioButton = new JRadioButton();
        allowRepeatedRadioButton.setBackground(new Color(-12501697));
        allowRepeatedRadioButton.setForeground(new Color(-4737097));
        allowRepeatedRadioButton.setText("Allow Repeated");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        CustomDifficultyPanel.add(allowRepeatedRadioButton, gbc);
        noRepeatedRadioButton = new JRadioButton();
        noRepeatedRadioButton.setBackground(new Color(-12501697));
        noRepeatedRadioButton.setForeground(new Color(-4737097));
        noRepeatedRadioButton.setSelected(true);
        noRepeatedRadioButton.setText("No Repeated");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        CustomDifficultyPanel.add(noRepeatedRadioButton, gbc);
        backButton = new JButton();
        backButton.setText("Back");
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 4;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.SOUTHEAST;
        gbc.insets = new Insets(0, 0, 5, 5);
        CustomDifficultyPanel.add(backButton, gbc);
        continueButton = new JButton();
        continueButton.setHorizontalTextPosition(11);
        continueButton.setText("Continue");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.weighty = 1.0;
        CustomDifficultyPanel.add(continueButton, gbc);
        final JSeparator separator1 = new JSeparator();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 0, 0, 5);
        CustomDifficultyPanel.add(separator1, gbc);
        turnSpinner = new JSpinner();
        turnSpinner.setForeground(new Color(-4737097));
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.ipadx = 20;
        gbc.ipady = 20;
        CustomDifficultyPanel.add(turnSpinner, gbc);
        lengthSpinner = new JSpinner();
        lengthSpinner.setForeground(new Color(-4737097));
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.ipadx = 20;
        gbc.ipady = 20;
        CustomDifficultyPanel.add(lengthSpinner, gbc);
        lengthLabel = new JLabel();
        lengthLabel.setForeground(new Color(-4737097));
        lengthLabel.setText("Combination Length");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        CustomDifficultyPanel.add(lengthLabel, gbc);
        turnsLabel = new JLabel();
        turnsLabel.setForeground(new Color(-4737097));
        turnsLabel.setText("Number of turns");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        CustomDifficultyPanel.add(turnsLabel, gbc);
        tipsCheckBox = new JCheckBox();
        tipsCheckBox.setBackground(new Color(-12501697));
        tipsCheckBox.setForeground(new Color(-4737097));
        tipsCheckBox.setText("Tips");
        tipsCheckBox.setToolTipText("Activate tips for the game");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        CustomDifficultyPanel.add(tipsCheckBox, gbc);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(allowRepeatedRadioButton);
        buttonGroup.add(noRepeatedRadioButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return CustomDifficultyPanel;
    }
}
